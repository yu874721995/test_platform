"""
Django settings for nextop_backend project.
Generated by 'django-admin startproject' using Django 3.1.3.
For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import datetime
from datetime import datetime as dt
import os
import ldap
from django_auth_ldap.config import LDAPSearch

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&_*8f-)+lcs2=0mm+b9*=_91wt9i^li7p%h0$2zzw%453q4!1_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',  # 跨域访问
    'test_plant',  # 测试计划
    'nextop_tapd',
    'user',  # 用户模块
    'api_case',  # 测试用例模块
    'channels',
    'django_apscheduler',
    'rest_framework',
    'test_management',  # 测试管理
    'test_tools' #测试工具
]
#增加跨越配置
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = ('*')
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)
CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',# 需注释，否则无法使用post请求
    'corsheaders.middleware.CorsMiddleware',  # 跨域访问
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'middleware.MlmLogging',
]

ROOT_URLCONF = 'nextop_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nextop_backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

if not os.environ.__contains__('MYSQL_HOST'):
    # 本地数据库配置
    # 极昼钉钉应用配置
    DING_APPKEY = 'xxxxx'
    DING_SECRET = 'xxxxxx'
    DING_AGENT_ID = 123456
    ROBOT_ID = 'xxxxxx'

    # DING_APPKEY = 'dinglufhne3xdfc2pbqw'
    # DING_SECRET = '_Kr9BOD8VpAFOzaChXu5zfVDl10axoB2GqsURABVzSXsETgSvkUGL91fN090alPM'
    # ROBOT_ID = 'dings5ixds3hnoutvww4'
    # DING_AGENT_ID = 1416719654
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            # 'NAME': 'nextop_test',
            'NAME': 'nextop_test_platform',
            'USER': 'root',
            # 'PASSWORD': '123456',
            'PASSWORD': 'system123456',
            'HOST': '127.0.0.1',
            # 'HOST': '10.0.1.56',
            'PORT': '3306',
            'TIME_ZONE': 'Asia/Shanghai',
            'OPTIONS': {
                'init_command': 'SET default_storage_engine=INNODB,character_set_connection=UTF8MB4,'
                                'collation_connection=utf8mb4_unicode_ci;'}
        }
    }
    # ENCODE_ASE_KEY = 'APr3CU3rBqCeLyT2Tu8eJHqF9HmIkgVMe96o5t88RVq'
    # DING_TOKEN = 'jEDxr8k7d5B6ih2u1C73HiXLJFOKiY6QxN7MR8w3uxqH9xWt'
    ENCODE_ASE_KEY = 'xxxxxx'
    DING_TOKEN = 'xxxxxx'
else:
    # 线上数据库及钉钉配置
    DING_APPKEY = 'xxxxx'
    DING_SECRET = 'xxxxx'
    DING_AGENT_ID = 123456
    ROBOT_ID = 'xxxxx'
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'nextop_test_platform',
            'USER': os.getenv('MYSQL_USER'),
            'PASSWORD': os.getenv('MYSQL_PASSWORD'),
            'HOST': os.getenv('MYSQL_HOST'),
            'PORT': os.getenv('MYSQL_PORT'),
            'TIME_ZONE': 'Asia/Shanghai',
            'OPTIONS': {
                'init_command': 'SET default_storage_engine=INNODB,character_set_connection=UTF8MB4,collation_connection=utf8mb4_unicode_ci;'}
        }
    }
    ENCODE_ASE_KEY = 'xxxxx'
    DING_TOKEN = 'xxxxx'

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

# ---------------- 时区配置开始 ---------------------

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# ---------------- 时区配置结束 ---------------------

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# ---------------- 用户认证鉴权配置开始 ---------------------

AUTH_USER_MODEL = 'user.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ('user.authentications.CustomJSONWebTokenAuthentication',),
    'EXCEPTION_HANDLER': 'user.utils.custom_exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'utils.pagination.CustomPagination',
    'DATETIME_FORMAT': "%Y-%m-%d %H:%M:%S",
    'PAGE_SIZE': 20
}

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=30),
    'JWT_ALLOW_REFRESH': True,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(hours=24),
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'user.utils.jwt_response_payload_handler',
    "JWT_AUTH_HEADER_PREFIX": "Bearer"
}

'''配置session参数'''
SESSION_ENGIN = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_NAME = "sessionid"
SESSION_COOKIE_AGE = 10
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SAVE_EVERY_REQUEST = False

# ---------------- 用户认证鉴权配置开始 ---------------------

# ---------------- 跨域访问配置开始 ---------------------

ALLOWED_HOSTS = ["*"]

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = ()
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)
CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
)

# # ---------------- 跨域访问配置结束 ---------------------

ASGI_APPLICATION = 'nextop_backend.asgi.application'
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": ["redis://:123456@127.0.0.1:6379"],
        },
    },
}

# logging配置
today_time = dt.now().strftime("%Y-%m-%d")
BASE_LOG_DIR = os.path.join(BASE_DIR, "log")
if not os.path.exists(BASE_LOG_DIR):
    os.makedirs(BASE_LOG_DIR)
LOGGING = {
    'version': 1,  # 保留字
    'disable_existing_loggers': False,  # 禁用已经存在的logger实例
    # 日志文件的格式
    'formatters': {
        # 详细的日志格式
        'standard': {
            'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'
                      '[%(levelname)s][%(message)s]'
        },
        # 简单的日志格式
        'simple': {
            'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
        },
        # 定义一个特殊的日志格式
        'collect': {
            'format': '%(message)s'
        }
    },
    # 过滤器
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 处理器
    'handlers': {
        # 在终端打印
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
            'class': 'logging.StreamHandler',  #
            'formatter': 'standard'
        },
        # 默认的
        'default': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_LOG_DIR, today_time + "_info.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 3,  # 最多备份几个
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        # 专门用来记错误日志
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_LOG_DIR, today_time + "_err.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        # 专门定义一个收集特定信息的日志
        'collect': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_LOG_DIR, today_time + "_collect.log"),
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'collect',
            'encoding': "utf-8"
        }
    },
    'loggers': {
        # 默认的logger应用如下配置
        '': {
            'handlers': ['default', 'console', 'error'],  # 上线之后可以把'console'移除
            'level': 'INFO',
            'propagate': True,  # 向不向更高级别的logger传递
        },
        # 名为 'collect'的logger还单独处理
        'collect': {
            'handlers': ['console', 'collect'],
            'level': 'INFO',
        }
    },
}
# 缓存配置
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '106.53.107.187:11211',
        'KEY_FUNCTION': lambda key, prefix_key, version: "django:%s" % key
    }
}

BASE_DN = "ou=nextop,dc=lumin,dc=top"
AUTH_LDAP_SERVER_URI = "ldap://111.111.11.1:389"

AUTH_LDAP_BIND_DN = 'cn=it.readonly,ou=运维部,ou=产品中心,ou=nextop,dc=lumin,dc=top'
AUTH_LDAP_BIND_PASSWORD = 'x10thyujisokXKT!ZlL'

AUTH_LDAP_USER_SEARCH = LDAPSearch("ou=nextop,dc=lumin,dc=top",
                                   ldap.SCOPE_SUBTREE, "(uid=%(user)s)")

AUTH_LDAP_CONNECTION_OPTIONS = {
    ldap.OPT_DEBUG_LEVEL: 1,
    ldap.OPT_REFERRALS: 0,
}

AUTH_LDAP_USER_ATTR_MAP = {
    "username": "sAMAccountName'",
    "name": "displayName",
    "email": "mail",
    "phone": "mobile",
}

AUTH_LDAP_CACHE_TIMEOUT = 7200

AUTH_LDAP_ALWAYS_UPDATE_USER = True

AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)
